#include <stdint.h>
#include <stdbool.h>
#include "inc/hw_memmap.h"
#include "inc/hw_types.h"
#include "driverlib/sysctl.h"
#include "driverlib/gpio.h"
#include "driverlib/uart.h"
#include "driverlib/pin_map.h"
#include "driverlib/rom.h"

#define TRIG_PIN GPIO_PIN_5
#define ECHO_PIN GPIO_PIN_4
#define TRIG_PORT GPIO_PORTB_BASE
#define ECHO_PORT GPIO_PORTB_BASE

void UART0_Init(void)
{
    SysCtlPeripheralEnable(SYSCTL_PERIPH_UART0);
    SysCtlPeripheralEnable(SYSCTL_PERIPH_GPIOA);

    GPIOPinConfigure(GPIO_PA0_U0RX);
    GPIOPinConfigure(GPIO_PA1_U0TX);
    GPIOPinTypeUART(GPIO_PORTA_BASE, GPIO_PIN_0 | GPIO_PIN_1);

    UARTConfigSetExpClk(UART0_BASE, SysCtlClockGet(), 115200,
                        (UART_CONFIG_WLEN_8 | UART_CONFIG_STOP_ONE | UART_CONFIG_PAR_NONE));
}

void UART0_Write(char c)
{
    UARTCharPut(UART0_BASE, c);
}

void UART0_WriteString(const char *str)
{
    while (*str)
    {
        UART0_Write(*str++);
    }
}

void delayMicroseconds(uint32_t us)
{
    SysCtlDelay((SysCtlClockGet() / 3 / 1000000) * us);  // 1 SysCtlDelay = 3 clock cycles
}

uint32_t measureDistance()
{
    uint32_t count = 0;

    // Trigger HIGH for 10us
    GPIOPinWrite(TRIG_PORT, TRIG_PIN, TRIG_PIN);
    delayMicroseconds(10);
    GPIOPinWrite(TRIG_PORT, TRIG_PIN, 0);

    // Wait for echo to go HIGH
    while (GPIOPinRead(ECHO_PORT, ECHO_PIN) == 0);

    // Measure time echo stays HIGH
    while (GPIOPinRead(ECHO_PORT, ECHO_PIN) != 0)
    {
        count++;
        delayMicroseconds(1);
        if (count > 30000) break; // avoid infinite loop
    }

    // Convert time to distance
    float distance = (count * 0.0343) / 2.0;

    if (distance > 400 || count == 0) return 0; // Filter out noise
    return (uint32_t)distance;
}

int main(void)
{
    // Set system clock to 40MHz
    SysCtlClockSet(SYSCTL_SYSDIV_5 | SYSCTL_USE_PLL |
                   SYSCTL_OSC_MAIN | SYSCTL_XTAL_16MHZ);

    // Enable GPIOs
    SysCtlPeripheralEnable(SYSCTL_PERIPH_GPIOB);
    while (!SysCtlPeripheralReady(SYSCTL_PERIPH_GPIOB));

    GPIOPinTypeGPIOOutput(TRIG_PORT, TRIG_PIN);
    GPIOPinTypeGPIOInput(ECHO_PORT, ECHO_PIN);

    // Initialize UART0
    UART0_Init();

    UART0_WriteString("Ultrasonic Sensor Distance Measurement Started\r\n");

    char buffer[64];
    while (1)
    {
        uint32_t distance = measureDistance();
        sprintf(buffer, "Distance: %d cm\r\n", distance);
        UART0_WriteString(buffer);

        SysCtlDelay(SysCtlClockGet() / 3);  // ~1 second delay
    }
}
